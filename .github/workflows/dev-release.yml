name: development release

on:
  push:
    branches: [dev] # dev branch에 push되는 경우 실행

jobs:
  release:

    # environment
    runs-on: ubuntu-latest # ubuntu-latest 환경에서 수행
    permissions: # workflow가 실행되는 동안 특정 GitHub API 권한을 제어
      contents: write # 파일 추가, 수정, 삭제, commit 생성 및 푸시 허용
      pull-requests: write # PR 생성 허용

    steps:
      - name: Checkout main branch # main 브랜치로 checkout
        uses: actions/checkout@v4

      - name: Enable corepack
        run: corepack enable

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: "yarn"

      - name: Install Dependencies
        run: yarn install

      # 테스트를 위한 workflow이므로 비활성
      # - name: Configure AWS credentials
      #   if: steps.changesets.outputs.published == 'true'
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: ap-northeast-2

      # 테스트를 위한 workflow이므로 비활성
      # - name: Deploy
      #   if: steps.changesets.outputs.published == 'true'
      #   env:
      #     NEXT_PUBLIC_NODE_ENV: 'development'
      #   run: |
      #     yarn run deploy:dev

  # 테스트를 위한 workflow이므로 비활성
  # notification:

  #   runs-on: ubuntu-latest
  #   needs: release
  #   if: always()

    # steps:
      # 테스트를 위한 workflow이므로 비활성
      # - name: Send Slack notification
      #   if: needs.release.outputs.published == 'true'
      #   uses: slackapi/slack-github-action@v1.26.0
      #   with:
      #     channel-id: "채널 ID"
      #     slack-message: "${{ github.repository }} 개발 배포 ${{ needs.release.result == 'success' &&  '✅ 성공' || '❌ 실패'}}"
      #   env:
      #     SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}